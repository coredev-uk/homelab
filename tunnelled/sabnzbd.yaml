apiVersion: v1
kind: ConfigMap
metadata:
  name: sabnzbd-scripts
  namespace: tunnelled
data:
  Clean.py: |
    #!/usr/bin/python3 -OO
    ##################################################################
    ### SABnzbd - Clean NZB Renamer                                 ##
    ##################################################################
    ##                                                              ##
    ## Removes the suffixes from NZB name used by bots:             ##
    ## examples: NZBgeek / Obfuscated / BUYMORE / Scrambled, etc..  ##
    ##                                                              ##
    ## NOTE: This script requires Python 3                          ##
    ##                                                              ##
    ## Install:                                                     ##
    ## 1. Copy script to SABnzbd's script folder                    ##
    ## 2. run: sudo chmod +x Clean.py                               ##
    ## 3. in SABnzbd go to Config > Switches                        ##
    ## 4. Change Pre-queue user script and select: Clean.py         ##
    ##################################################################

    import sys
    import re

    # normalize argv to scriptname and just first 8 arguments to maintain compatibility
    sys.argv = sys.argv[:9]
    try:
        # Parse the input variables for SABnzbd version >= 4.2.0
        (
            scriptname,
            nzbname,
            postprocflags,
            category,
            script,
            prio,
            downloadsize,
            grouplist,
        ) = sys.argv
    except:
        sys.exit(1)  # exit with 1 causes SABnzbd to ignore the output of this script

    fwp = nzbname
    fwp = re.sub(r"(?i)-4P$", "", fwp)
    fwp = re.sub(r"(?i)-4Planet$", "", fwp)
    fwp = re.sub(r"(?i)-AlternativeToRequested$", "", fwp)
    fwp = re.sub(r"(?i)-AlteZachen$", "", fwp)
    fwp = re.sub(r"(?i)-AsRequested$", "", fwp)
    fwp = re.sub(r"(?i)-AsRequested-xpost$", "", fwp)
    fwp = re.sub(r"(?i)-BUYMORE$", "", fwp)
    fwp = re.sub(r"(?i)-Chamele0n$", "", fwp)
    fwp = re.sub(r"(?i)-GEROV$", "", fwp)
    fwp = re.sub(r"(?i)-iNC0GNiTO$", "", fwp)
    fwp = re.sub(r"(?i)-NZBGeek$", "", fwp)
    fwp = re.sub(r"(?i)-Obfuscated$", "", fwp)
    fwp = re.sub(r"(?i)-Obfuscation$", "", fwp)
    fwp = re.sub(r"(?i)-postbot$", "", fwp)
    fwp = re.sub(r"(?i)-Rakuv[a-z0-9]*$", "", fwp)
    fwp = re.sub(r"(?i)-RePACKPOST$", "", fwp)
    fwp = re.sub(r"(?i)-Scrambled$", "", fwp)
    fwp = re.sub(r"(?i)-WhiteRev$", "", fwp)
    fwp = re.sub(r"(?i)-WRTEAM$", "", fwp)
    fwp = re.sub(r"(?i)-CAPTCHA$", "", fwp)
    fwp = re.sub(r"(?i)-Z0iDS3N$", "", fwp)
    fwp = re.sub(r"(?i)\[eztv([ ._-]re)?\]$", "", fwp)
    fwp = re.sub(r"(?i)\[TGx\]$", "", fwp)
    fwp = re.sub(r"(?i)\[ettv\]$", "", fwp)
    fwp = re.sub(r"(?i)\[TGx\]-xpost$", "", fwp)
    fwp = re.sub(r"(?i).mkv-xpost$", "", fwp)
    fwp = re.sub(r"(?i)-xpost$", "", fwp)
    fwp = re.sub(r"(?i)(-D-Z0N3|\-[^-.\n]*)(\-.{4})?$", r"\1", fwp)

    print("1")  # Accept
    print(fwp)
    print()
    print()
    print()
    print()
    print()
    # 0 means OK
    sys.exit(0)

  replace_for.py: |
    #!/usr/bin/python3 -OO
    ##################################################################
    ### SABnzbd - Replace underscores with dots                     ##
    ##################################################################
    ##                                                              ##
    ## NOTE: This script requires Python 3                          ##
    ##                                                              ##
    ## Author: miker                                                ##
    ##                                                              ##
    ## Install:                                                     ##
    ## 1. Copy script to SABnzbd's script folder                    ##
    ## 2. run: sudo chmod +x replace_for.py                         ##
    ## 3. in SABnzbd go to Config > Categories                      ##
    ## 4. Assign replace_for.py to the required category            ##
    ##################################################################

    import sys
    import os
    import os.path

    try:
        (
            scriptname,
            directory,
            orgnzbname,
            jobname,
            reportnumber,
            category,
            group,
            postprocstatus,
            url,
        ) = sys.argv
    except:
        print("No commandline parameters found")
        sys.exit(1)  # exit with 1 causes SABnzbd to ignore the output of this script

    files = os.listdir(directory)

    for src in files:
        if src.find("_") != -1:
            dst = src.replace("_", ".")
            os.rename(os.path.join(directory, src), os.path.join(directory, dst))
            print(src, "renamed to ", dst)

    print()
    print()
    print()
    print()
    # 0 means OK
    sys.exit(0)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sabnzbd
  namespace: tunnelled
  labels:
    app: sabnzbd
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sabnzbd
  template:
    metadata:
      labels:
        app: sabnzbd
    spec:
      initContainers:
        - name: scripts-setup
          image: busybox:latest
          command: ["sh", "-c"]
          args:
            - |
              mkdir -p /scripts
              cp /tmp/scripts/* /scripts/
              chmod +x /scripts/*.py
              echo "Scripts setup completed"
          volumeMounts:
            - name: scripts-volume
              mountPath: /scripts
            - name: scripts-temp
              mountPath: /tmp/scripts
        - name: config-setup
          image: busybox:latest
          command: ["sh", "-c"]
          args:
            - |
              # Wait for gluetun to be ready
              echo "Waiting for gluetun HTTP proxy to be ready..."
              until nc -z gluetun 8888; do
                echo "Gluetun HTTP proxy not ready, waiting..."
                sleep 5
              done
              echo "Gluetun HTTP proxy is ready"
              
              if [ -f /config/sabnzbd.ini ]; then
                echo "sabnzbd.ini exists, updating essential settings..."
                if ! grep -q "sabnzbd.tunnelled" /config/sabnzbd.ini; then
                  sed -i 's/host_whitelist = .*/host_whitelist = sabnzbd.home.coredev.uk, sabnzbd.tunnelled, sabnzbd/' /config/sabnzbd.ini
                  echo "Updated host_whitelist"
                fi
                if ! grep -q "script_dir = /scripts" /config/sabnzbd.ini; then
                  sed -i 's|script_dir = .*|script_dir = /scripts|' /config/sabnzbd.ini
                  echo "Updated script_dir"
                fi
              else
                echo "sabnzbd.ini not found, will be created by SABnzbd on first run"
              fi
          volumeMounts:
            - name: config
              mountPath: /config
      containers:
        - name: sabnzbd
          image: lscr.io/linuxserver/sabnzbd:4.5.3
          ports:
            - containerPort: 8080
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: TZ
              value: "Europe/London"
            # HTTP proxy configuration for external traffic
            - name: HTTP_PROXY
              value: "http://gluetun:8888"
            - name: HTTPS_PROXY
              value: "http://gluetun:8888"
            - name: NO_PROXY
              value: "localhost,127.0.0.1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,.svc,.cluster.local,gluetun"
          volumeMounts:
            - name: config
              mountPath: /config
            - name: downloads
              mountPath: /downloads
            - name: scripts-volume
              mountPath: /scripts
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          # Health checks
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: sabnzbd-config
        - name: downloads
          persistentVolumeClaim:
            claimName: downloads-data-host
        - name: scripts-volume
          emptyDir: {}
        - name: scripts-temp
          configMap:
            name: sabnzbd-scripts
            defaultMode: 0755
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sabnzbd-config
  namespace: tunnelled
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: longhorn
---
apiVersion: v1
kind: Service
metadata:
  name: sabnzbd
  namespace: tunnelled
  labels:
    app: sabnzbd
spec:
  selector:
    app: sabnzbd
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  type: ClusterIP